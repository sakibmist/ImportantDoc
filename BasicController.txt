using System.Linq;
using Microsoft.AspNetCore.Mvc;
using Todo.Api.Models;

namespace Todo.Api.Controllers
{
    [Route("api/todo-items")]
    [ApiController]
    public class TodoItemsController : ControllerBase
    {
        private readonly DataContext _dataContext;
        public CustomersController(DataContext dataContext)
        {
            _dataContext = dataContext;
        }

        [HttpGet]
        public IActionResult GetAllData()
        {
            try
            {
                var items = _dataContext.Customers.ToList();
                return Ok(items);//200
            }
            catch (System.Exception)
            {
                return BadRequest(); //400
            }
        }

        [HttpGet("{id}", Name = "GetData")]
        public IActionResult GetDataById(int id)
        {
            try
            {
                var data = _dataContext.Customers.FirstOrDefault(x => x.Id == id);
                return Ok(data); //200
            }
            catch (System.Exception)
            {

                return BadRequest(); //400
            }
        }

        [HttpPost]
        public IActionResult AddData(Customer customer)
        {
            try
            {
		if(customer == null) return NotFound(); //404
                _dataContext.Add(customer);
                _dataContext.SaveChanges();
                return CreatedAtRoute("GetData", new { id = customer.Id }, customer); //201
            }
            catch (System.Exception)
            {
                return BadRequest();
            }
        }


	[HttpGet("check/{accountNo}")]
        public IActionResult CheckIsAccountNoExists(string accountNo)
        {
            try
            {
                var isExist = _dataContext.Accounts.Any(x => x.AccountNo.ToLower() == accountNo.ToLower());
                return Ok(new { IsExist = isExist }); //200
            }
            catch (System.Exception)
            {

                return BadRequest(); //400
            }
        }

        [HttpDelete("{id}")]
        public IActionResult DeleteById(int id)
        {
            try
            {
                var data = _dataContext.Customers.FirstOrDefault(x => x.Id == id);
                if (data == null) return null;
                _dataContext.Customers.Remove(data);
                _dataContext.SaveChanges();
                return Ok(); //200
            }
            catch (System.Exception)
            {
                return BadRequest(); // 400
            }
        }

        [HttpPut("{id}")]
        public IActionResult UpdateData(int id, Customer customer)
        {
            try
            {
                if (id != customer.Id) return BadRequest("Invalid Data");// validation status 400
                var data = _dataContext.Customers.FirstOrDefault(x => x.Id == id);
                if (data == null) return NotFound(); // 404
                data.Name = customer.Name;
                _dataContext.Customers.Update(data);
                _dataContext.SaveChanges();
                return NoContent(); // 204
            }
            catch (System.Exception)
            {
                return BadRequest("Error occured"); //400
            }
        }
    }
}